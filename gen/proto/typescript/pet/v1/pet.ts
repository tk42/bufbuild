// @generated by protobuf-ts 2.5.0
// @generated from protobuf file "pet/v1/pet.proto" (package "pet.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DateTime } from "../../google/type/datetime";
/**
 * Pet represents a pet in the pet store.
 *
 * @generated from protobuf message pet.v1.Pet
 */
export interface Pet {
    /**
     * @generated from protobuf field: pet.v1.PetType pet_type = 1;
     */
    petType: PetType;
    /**
     * @generated from protobuf field: string pet_id = 2;
     */
    petId: string;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: google.type.DateTime created_at = 4;
     */
    createdAt?: DateTime;
}
/**
 * @generated from protobuf message pet.v1.GetPetRequest
 */
export interface GetPetRequest {
    /**
     * @generated from protobuf field: string pet_id = 1;
     */
    petId: string;
}
/**
 * @generated from protobuf message pet.v1.GetPetResponse
 */
export interface GetPetResponse {
    /**
     * @generated from protobuf field: pet.v1.Pet pet = 1;
     */
    pet?: Pet;
}
/**
 * @generated from protobuf message pet.v1.PutPetRequest
 */
export interface PutPetRequest {
    /**
     * @generated from protobuf field: pet.v1.PetType pet_type = 1;
     */
    petType: PetType;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message pet.v1.PutPetResponse
 */
export interface PutPetResponse {
    /**
     * @generated from protobuf field: pet.v1.Pet pet = 1;
     */
    pet?: Pet;
}
/**
 * @generated from protobuf message pet.v1.DeletePetRequest
 */
export interface DeletePetRequest {
    /**
     * @generated from protobuf field: string pet_id = 1;
     */
    petId: string;
}
/**
 * @generated from protobuf message pet.v1.DeletePetResponse
 */
export interface DeletePetResponse {
}
/**
 * PetType represents the different types of pets in the pet store.
 *
 * @generated from protobuf enum pet.v1.PetType
 */
export enum PetType {
    /**
     * @generated from protobuf enum value: PET_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PET_TYPE_CAT = 1;
     */
    CAT = 1,
    /**
     * @generated from protobuf enum value: PET_TYPE_DOG = 2;
     */
    DOG = 2,
    /**
     * @generated from protobuf enum value: PET_TYPE_SNAKE = 3;
     */
    SNAKE = 3,
    /**
     * @generated from protobuf enum value: PET_TYPE_HAMSTER = 4;
     */
    HAMSTER = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Pet$Type extends MessageType<Pet> {
    constructor() {
        super("pet.v1.Pet", [
            { no: 1, name: "pet_type", kind: "enum", T: () => ["pet.v1.PetType", PetType, "PET_TYPE_"] },
            { no: 2, name: "pet_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_at", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<Pet>): Pet {
        const message = { petType: 0, petId: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Pet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pet): Pet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pet.v1.PetType pet_type */ 1:
                    message.petType = reader.int32();
                    break;
                case /* string pet_id */ 2:
                    message.petId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* google.type.DateTime created_at */ 4:
                    message.createdAt = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pet.v1.PetType pet_type = 1; */
        if (message.petType !== 0)
            writer.tag(1, WireType.Varint).int32(message.petType);
        /* string pet_id = 2; */
        if (message.petId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.petId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* google.type.DateTime created_at = 4; */
        if (message.createdAt)
            DateTime.internalBinaryWrite(message.createdAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.Pet
 */
export const Pet = new Pet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPetRequest$Type extends MessageType<GetPetRequest> {
    constructor() {
        super("pet.v1.GetPetRequest", [
            { no: 1, name: "pet_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPetRequest>): GetPetRequest {
        const message = { petId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPetRequest): GetPetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pet_id */ 1:
                    message.petId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pet_id = 1; */
        if (message.petId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.petId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.GetPetRequest
 */
export const GetPetRequest = new GetPetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPetResponse$Type extends MessageType<GetPetResponse> {
    constructor() {
        super("pet.v1.GetPetResponse", [
            { no: 1, name: "pet", kind: "message", T: () => Pet }
        ]);
    }
    create(value?: PartialMessage<GetPetResponse>): GetPetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPetResponse): GetPetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pet.v1.Pet pet */ 1:
                    message.pet = Pet.internalBinaryRead(reader, reader.uint32(), options, message.pet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pet.v1.Pet pet = 1; */
        if (message.pet)
            Pet.internalBinaryWrite(message.pet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.GetPetResponse
 */
export const GetPetResponse = new GetPetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutPetRequest$Type extends MessageType<PutPetRequest> {
    constructor() {
        super("pet.v1.PutPetRequest", [
            { no: 1, name: "pet_type", kind: "enum", T: () => ["pet.v1.PetType", PetType, "PET_TYPE_"] },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutPetRequest>): PutPetRequest {
        const message = { petType: 0, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PutPetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutPetRequest): PutPetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pet.v1.PetType pet_type */ 1:
                    message.petType = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutPetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pet.v1.PetType pet_type = 1; */
        if (message.petType !== 0)
            writer.tag(1, WireType.Varint).int32(message.petType);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.PutPetRequest
 */
export const PutPetRequest = new PutPetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutPetResponse$Type extends MessageType<PutPetResponse> {
    constructor() {
        super("pet.v1.PutPetResponse", [
            { no: 1, name: "pet", kind: "message", T: () => Pet }
        ]);
    }
    create(value?: PartialMessage<PutPetResponse>): PutPetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PutPetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutPetResponse): PutPetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pet.v1.Pet pet */ 1:
                    message.pet = Pet.internalBinaryRead(reader, reader.uint32(), options, message.pet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutPetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pet.v1.Pet pet = 1; */
        if (message.pet)
            Pet.internalBinaryWrite(message.pet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.PutPetResponse
 */
export const PutPetResponse = new PutPetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePetRequest$Type extends MessageType<DeletePetRequest> {
    constructor() {
        super("pet.v1.DeletePetRequest", [
            { no: 1, name: "pet_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePetRequest>): DeletePetRequest {
        const message = { petId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeletePetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePetRequest): DeletePetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pet_id */ 1:
                    message.petId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string pet_id = 1; */
        if (message.petId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.petId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.DeletePetRequest
 */
export const DeletePetRequest = new DeletePetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePetResponse$Type extends MessageType<DeletePetResponse> {
    constructor() {
        super("pet.v1.DeletePetResponse", []);
    }
    create(value?: PartialMessage<DeletePetResponse>): DeletePetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeletePetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePetResponse): DeletePetResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pet.v1.DeletePetResponse
 */
export const DeletePetResponse = new DeletePetResponse$Type();
/**
 * @generated ServiceType for protobuf service pet.v1.PetStoreService
 */
export const PetStoreService = new ServiceType("pet.v1.PetStoreService", [
    { name: "GetPet", options: {}, I: GetPetRequest, O: GetPetResponse },
    { name: "PutPet", options: {}, I: PutPetRequest, O: PutPetResponse },
    { name: "DeletePet", options: {}, I: DeletePetRequest, O: DeletePetResponse }
]);
